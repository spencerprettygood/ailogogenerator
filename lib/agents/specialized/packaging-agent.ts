import { BaseAgent } from '../base/base-agent';
import { 
  AgentConfig, 
  AgentInput, 
  AgentOutput, 
  PackagingAgentInput, 
  PackagingAgentOutput 
} from '../../types-agents';
import { nanoid } from 'nanoid';

/**
 * PackagingAgent - Packages all assets for delivery to the user
 */
export class PackagingAgent extends BaseAgent {
  constructor(config?: Partial<AgentConfig>) {
    super(
      'packaging', 
      ['asset-packaging'],
      {
        model: 'claude-3-5-haiku-20240307', // This agent doesn't primarily use Claude
        temperature: 0.1,
        maxTokens: 500,
        ...config
      }
    );
    
    // This agent doesn't primarily use Claude - it handles asset packaging directly
  }
  
  /**
   * Generate the prompt for packaging
   * This agent doesn't primarily use prompts, but can generate README content
   */
  protected async generatePrompt(input: PackagingAgentInput): Promise<string> {
    const { brandName } = input;
    
    // Only used for generating README content
    return `Please create a brief README.md file for a logo package for "${brandName}".

The package contains:
- Primary logo in SVG format
- PNG exports in various sizes (256x256, 512x512, 1024x1024)
- Monochrome variants (black and white)
- Favicon (ICO and SVG formats)
- Brand guidelines (HTML)

Include:
- A brief introduction
- File structure explanation
- Usage instructions
- Credits for the AI Logo Generator

Keep it concise but professional. Format as proper markdown.`;
  }
  
  /**
   * Process packaging operation
   * This is primarily a direct asset packaging operation, not an AI response processing
   */
  protected async processResponse(responseContent: string, originalInput: AgentInput): Promise<PackagingAgentOutput> {
    const input = originalInput as PackagingAgentInput;
    const { 
      brandName, 
      svg, 
      pngVariants, 
      monochrome, 
      favicon, 
      guidelines 
    } = input;
    
    try {
      // Generate a filename for the package
      const sanitizedBrandName = brandName.toLowerCase().replace(/[^a-z0-9]/g, '-');
      const uniqueId = nanoid(6);
      const fileName = `${sanitizedBrandName}-logo-package-${uniqueId}.zip`;
      
      // In a real implementation, this would use JSZip to create a ZIP file
      // For this demo, we're just simulating the process
      
      // Mock README content generation
      const readmeContent = responseContent || 
        `# ${brandName} Logo Package\n\nThis package contains the logo assets for ${brandName}, generated by AI Logo Generator.\n\n## Contents\n\n- Primary logo (SVG)\n- PNG exports (256px, 512px, 1024px)\n- Monochrome variants\n- Favicon\n- Brand guidelines\n\n## Usage\n\nRefer to the brand guidelines.html for detailed usage instructions.\n\n## Generated with AI Logo Generator\n\nÂ© ${new Date().getFullYear()} AI Logo Generator`;
      
      // Mock file creation process
      console.log(`[Packaging Agent] Creating package for ${brandName}...`);
      console.log(`[Packaging Agent] Adding main SVG: ${svg.substring(0, 50)}...`);
      console.log(`[Packaging Agent] Adding PNG variants: ${Object.keys(pngVariants).length} files`);
      console.log(`[Packaging Agent] Adding monochrome variants: ${Object.keys(monochrome).length} files`);
      console.log(`[Packaging Agent] Adding favicon: ${favicon.svg.substring(0, 50)}...`);
      console.log(`[Packaging Agent] Adding guidelines: ${guidelines.html.substring(0, 50)}...`);
      console.log(`[Packaging Agent] Adding README: ${readmeContent.substring(0, 50)}...`);
      
      // Mock ZIP file creation
      const mockFileSize = 250 * 1024; // 250KB mock size
      const downloadUrl = `/api/download?file=${fileName}`;
      
      // If everything is valid, return the processed result
      return {
        success: true,
        result: {
          fileName,
          fileSize: mockFileSize,
          downloadUrl
        }
      };
    } catch (error) {
      console.error('Failed to process packaging operation:', error);
      return {
        success: false,
        error: {
          message: 'Failed to package assets',
          details: error instanceof Error ? error.message : String(error)
        }
      };
    }
  }
}